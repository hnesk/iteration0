<?xml version="1.0" encoding="UTF-8"?>
<project name="Iteration 0" default="build">
    <property file="build/ant.properties"/>
    <property environment="env"/>
    <property name="basedir" value="." />
    <property name="builddir" value="${basedir}/build"/>
    <property name="bindir" value="${basedir}/bin"/>
    <property name="buildbindir" value="${bindir}"/>
    <property name="deployhost" value="flosse.gucken.org" />
    <property name="deploydir" value="/var/www/flosse.gucken.org/" />


    <target name="build" depends="build-sequential"/>

    <target name="build-sequential" depends="prepare,lint,composer-install,twig-lint,yaml-lint,install-assets,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpunit,phpdox"/>

    <target name="build-parallel" depends="prepare,lint,composer-install,tools-parallel,phpdox"/>

    <target name="tools-parallel" description="Run tools in parallel">

        <parallel threadCount="4">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpunit"/>
            <antcall target="twig-lint"/>
            <antcall target="yaml-lint"/>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/bin"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/bin"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
        <mkdir dir="${builddir}/phpdox"/>
    </target>


    <target name="-check-composer" unless="composer.exists">
        <available property="composer.exists" file="${buildbindir}/composer.phar"/>
    </target>

    <target name="install-composer" description="Install Composer locally" depends="-check-composer" unless="${composer.exists}">
        <get src="https://getcomposer.org/installer" dest="${buildbindir}/composer-installer" usetimestamp="true"/>
        <exec executable="php">
            <arg file="${buildbindir}/composer-installer" />
            <arg value="--install-dir=${buildbindir}" />
            <arg value="--disable-tls" />
        </exec>
    </target>

    <target name="composer-selfupdate" description="Composer selfupdate" depends="install-composer" unless="composer.selfupdate">
        <exec executable="${buildbindir}/composer.phar">
            <arg value="selfupdate" />
        </exec>
        <available property="composer.selfupdate" file="${basedir}/composer.lock"/>
    </target>

    <target name="composer-install" description="Composer install" depends="composer-selfupdate" unless="composer.install">
        <exec executable="${buildbindir}/composer.phar">
            <arg value="install" />
            <arg value="--prefer-dist"/>
            <arg value="--dev"/>
            <arg value="--no-progress"/>
            <arg value="--no-interaction"/>
            <arg value="--working-dir"/>
            <arg file="${basedir}" />
        </exec>
        <available property="composer.install" file="${basedir}/composer.lock"/>
    </target>

    <target name="composer-install-no-dev" description="Composer install --no-dev" depends="composer-selfupdate">
        <exec executable="${buildbindir}/composer.phar">
            <arg value="install" />
            <arg value="--prefer-dist"/>
            <arg value="--no-dev"/>
            <arg value="--optimize-autoloader"/>
            <arg value="--no-progress"/>
            <arg value="--no-interaction"/>
            <arg value="--working-dir"/>
            <arg file="${basedir}" />
        </exec>
    </target>

    <target name="lint">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>

            <fileset dir="${basedir}/src">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="twig-lint">
        <exec executable="./bin/console" failonerror="true">
            <arg value="twig:lint"/>
            <arg value="src"/>
        </exec>
        <exec executable="./bin/console" failonerror="true">
            <arg value="twig:lint"/>
            <arg value="app"/>
        </exec>
    </target>

    <target name="yaml-lint">
        <exec executable="./bin/console" failonerror="true">
            <arg value="yaml:lint"/>
            <arg value="src"/>
        </exec>
        <exec executable="./bin/console" failonerror="true">
            <arg value="yaml:lint"/>
            <arg value="app"/>
        </exec>

    </target>

    <target name="install-assets">
        <exec executable="./bin/console" failonerror="true">
            <arg value="assetic:dump"/>
        </exec>
    </target>

    <target name="phploc"
            depends="composer-install, lint"
            description="Measure project size using PHPLOC" >
        <exec executable="${buildbindir}/phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${builddir}/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${builddir}/logs/phploc.xml"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="pdepend"
            depends="composer-install, lint"
            description="Calculate software metrics using PHP_Depend" >
        <exec executable="${buildbindir}/pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="phpmd"
            depends="composer-install, lint"
            description="Perform project mess detection using PHPMD and print result in text format">
        <exec executable="${buildbindir}/phpmd">
            <arg path="${basedir}/src"/>
            <arg value="text"/>
            <arg path="${builddir}/phpmd.xml"/>
        </exec>
    </target>

    <target name="phpmd-ci"
            depends="composer-install, lint"
            description="Perform project mess detection using PHPMD and log result in XML format">
        <exec executable="${buildbindir}/phpmd">
            <arg path="${basedir}/src"/>
            <arg value="xml"/>
            <arg path="${builddir}/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${builddir}/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs"
            depends="composer-install, lint"
            description="Find coding standard violations using PHP_CodeSniffer and print result in text format">
        <exec executable="${buildbindir}/phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            depends="composer-install, lint"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format">
        <exec executable="${buildbindir}/phpcs" output="/dev/null">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${builddir}/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="phpcpd"
            depends="composer-install, lint"
            description="Find duplicate code using PHPCPD">
        <exec executable="${buildbindir}/phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${builddir}/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="phpunit"
            description="Run unit tests with PHPUnit"
            depends="composer-install, lint">
        <exec executable="${buildbindir}/phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/build"/>
        </exec>
    </target>

    <target name="unit"
            description="Run all fast unit tests with PHPUnit"
            depends="lint">
        <exec executable="${buildbindir}/phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/build"/>
            <arg value="--exclude-group" />
            <arg value="slow" />
        </exec>
    </target>

    <target name="tar" description="Deploys to test server" depends="prepare,lint,composer-selfupdate">
        <exec executable="./bin/console" failonerror="true">
            <arg value="cache:clear"/>
            <arg value="--env=prod"/>
            <arg value="--no-debug"/>
        </exec>
        <exec executable="./bin/console" failonerror="true">
            <arg value="assetic:dump"/>
            <arg value="--env=prod"/>
            <arg value="--no-debug"/>
        </exec>
        <antcall target="composer-install-no-dev"/>
        <tar destfile="${builddir}/flosse.tar.gz" basedir="." compression="gzip" longfile="gnu">
            <include name="app/" />
            <include name="bin/" />
            <exclude name="var/"/>
            <exclude name="app/config/parameters.yml"/>
            <exclude name="app/Resources/java"/>
            <exclude name="app/Resources/less"/>

            <include name="src/" />

            <include name="vendor/"/>
            <exclude name="vendor/*/*/tests/"/>
            <exclude name="vendor/*/*/*/tests/"/>
            <exclude name="vendor/*/*/*/*/Tests/"/>
            <exclude name="vendor/*/*/*/*/*/Tests/"/>
            <exclude name="vendor/*/*/*/*/*/*/Tests/"/>
            <exclude name="vendor/*/*/*/*/*/*/*/Tests/"/>

            <include name="web/"/>
            <exclude name="web/resources/"/>
            <!--
            <exclude name="web/app_dev.php"/>
            <exclude name="web/bundles/framework/"/>
            <exclude name="web/bundles/sensiodistribution/"/>
            -->

            <include name="web/js/jquery.js"/>
            <exclude name="web/js/jquery_*.js"/>

            <include name="web/js/bootstrap.js"/>
            <exclude name="web/js/bootstrap_*.js"/>

            <include name="web/css/bootstrap.css"/>
            <exclude name="web/css/bootstrap_*.css"/>

        </tar>
        <antcall target="composer-install" />
    </target>

    <target name="cs-do">
        <exec executable="${buildbindir}/php-cs-fixer">
            <arg value="fix"/>
            <arg value="--fixers=-remove_lines_between_uses"/>
            <arg file="${basedir}/src"/>
        </exec>
    </target>


    <target name="deploy" depends="">
        <exec executable="scp" failonerror="true">
            <arg file="${builddir}/flosse.tar.gz" />
            <arg value="${deployhost}:${deploydir}" />
        </exec>
        <!-- <get src="http://${deployhost}/apc.php" dest="./var/cache/apc_clear"/> -->
        <exec executable="ssh" failonerror="true">
            <arg value="${deployhost}" />
            <arg value="cd ${deploydir}; tar -xpzf flosse.tar.gz; rm -Rf ./var/cache/*/ ; chmod +x ./bin/console; ./bin/console --no-debug --env=prod cache:clear" />
        </exec>
    </target>


    <target name="phpdox"
            description="Generate API documentation using phpDox"
            depends="composer-install, lint">
        <exec executable="${buildbindir}/phpdox" dir="${builddir}"/>
    </target>
</project>